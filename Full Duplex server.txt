import socket
import threading

# -------------------- SERVER SETUP --------------------
server = socket.socket()

# üß† ENTER YOUR SERVER MACHINE IP BELOW:
# Example: '192.168.1.5'  ‚Üê Replace with your computer's IP
# Or use 'localhost' if testing both on same PC
server_ip = input("Enter your Server IP (e.g., 192.168.1.5 or 'localhost'): ")

server.bind((server_ip, 9999))  # Bind to specified IP and port
server.listen(1)  # Start listening for incoming connections
print(f"‚úÖ Server started on {server_ip}:9999 ‚Äî waiting for client...")

conn, addr = server.accept()  # Accept incoming connection
print("üîó Connected with client at:", addr)

# -------------------- THREAD FUNCTIONS --------------------
def receive():
    while True:
        msg = conn.recv(1024).decode()  # Receive message from client
        if not msg or msg.lower() == "exit":
            print("\n‚ùå Client ended chat.")
            break
        print("\nClient:", msg)

def send():
    while True:
        msg = input()  # Get input from server
        conn.send(msg.encode())  # Send message to client
        if msg.lower() == "exit":
            print("‚úÖ Chat closed by server.")
            break

# -------------------- START FULL DUPLEX --------------------
# Create and start threads for receiving and sending messages concurrently
t1 = threading.Thread(target=receive)
t2 = threading.Thread(target=send)

t1.start()
t2.start()

# -------------------- UBUNTU EXECUTION STEPS --------------------
# 1. Open your terminal in Ubuntu.
# 2. Make sure Python is installed by running: `python3 --version`.
#    If not, install it using: `sudo apt update && sudo apt install python3`.
# 3. Save this script as `server.py` on your machine.
# 4. Open terminal and navigate to the directory where the script is saved.
# 5. Run the server script by executing:
#    ```
#    python3 server.py
#    ```
#    It will ask for the server IP.
#    - If you're running the server on the same machine, you can enter `localhost`.
#    - If you want it on a different machine, use your computer's local IP address (e.g., `192.168.1.5`).
# 6. If you wish to use a different port, make sure to change the port number `9999` in both the server and client.
# 7. Once the server is running, wait for a client to connect. The server will print a confirmation of the connection.
# 8. Now the server is ready to communicate with a client using full-duplex communication:
#    - The server will listen for messages from the client.
#    - You can also send messages to the client.
# 9. To exit, type `exit` in the server terminal or let the client send `exit`.

