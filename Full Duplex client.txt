import socket
import threading

# -------------------- CLIENT SETUP --------------------
client = socket.socket()

# üß† ENTER THE SERVER MACHINE IP BELOW:
# Must match the IP entered in the server program
# Example: '192.168.1.5' or 'localhost' (if same computer)
server_ip = input("Enter Server IP to connect (e.g., 192.168.1.5 or 'localhost'): ")

client.connect((server_ip, 9999))  # Connect to the server at the given IP and port
print("‚úÖ Connected to server!")

# -------------------- THREAD FUNCTIONS --------------------
def receive():
    while True:
        msg = client.recv(1024).decode()  # Receive message from server
        if not msg or msg.lower() == "exit":
            print("\n‚ùå Server ended chat.")
            break
        print("\nServer:", msg)

def send():
    while True:
        msg = input()  # Get input from the user to send to server
        client.send(msg.encode())  # Send message to server
        if msg.lower() == "exit":
            print("‚úÖ Chat closed by client.")
            break

# -------------------- START FULL DUPLEX --------------------
# Create and start threads for receiving and sending messages concurrently
t1 = threading.Thread(target=receive)
t2 = threading.Thread(target=send)

t1.start()
t2.start()

# -------------------- UBUNTU EXECUTION STEPS --------------------
# 1. Open your terminal in Ubuntu.
# 2. Make sure Python is installed by running: `python3 --version`.
#    If not, install it using: `sudo apt update && sudo apt install python3`.
# 3. Save this script as `client.py` on your machine.
# 4. Open terminal and navigate to the directory where the script is saved.
# 5. Run the client script by executing:
#    ```
#    python3 client.py
#    ```
#    It will ask for the server IP.
#    - If you're running the server on the same machine, you can enter `localhost`.
#    - If you want to connect to a server on a different machine, use the server's IP address (e.g., `192.168.1.5`).
# 6. Once the client is connected, it will start the full-duplex communication:
#    - The client can send messages to the server.
#    - The client will also listen for messages from the server.
# 7. To exit, type `exit` in the client terminal or let the server send `exit`.

